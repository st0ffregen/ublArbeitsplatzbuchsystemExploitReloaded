#!/usr/bin/env python
# -*- coding: utf-8 -*-
import requests
import threading
import os
from dotenv import load_dotenv

load_dotenv()


class RequestThread (threading.Thread):
	
	def __init__(self, offset, limit, token):
		threading.Thread.__init__(self)
		self.offset = offset
		self.limit = limit
		self.token = token

	def run(self):
		print('starting thread. offset: ' + str(self.offset) + ', limit: ' + str(self.limit))
		for i in range(self.offset, self.offset + self.limit):
			readerNumber = formatNumber(i)
			bookings = getUserReservations(readerNumber, self.token)
			if len(bookings) > 0:
				print('user ' + readerNumber + ' has the following bookings:')
				print(bookings)

		print('terminate thread')


def formatNumber(number):
	newNumber = number
	if number < 1000000:
		requiredNumberOfZeros = 7 - len(str(number))
		newNumber = ''.join('0' for i in range(0,requiredNumberOfZeros)) + str(number)

	return str(newNumber)[:6] + '-' + str(newNumber)[6:7]


def getUserReservations(readerNumber, token):
	payload = {'token': token, 'readernumber': readerNumber}
	response = requests.post('https://seats.ub.uni-leipzig.de/api/booking/admin', json=payload)
	return response.json()['bookings']


def login(readerNumber, password):
    payload = {'readernumber': readerNumber, 'password': password, 'logintype': '1'}
    response = requests.post('https://seats.ub.uni-leipzig.de/api/booking/login', data=payload)
    return response.json()['token']


def spawnThread(offset, limit, numberOfThreads, token):
	for i in range(0, numberOfThreads):
		thread = RequestThread(offset + i * limit, limit, token)
		thread.start()


def main():
    print('logging in')
    readerNumberForLogin = os.environ['readerNumber']
    password = os.environ['password']
    token = login(readerNumberForLogin, password)

    print('start gathering')
    spawnThread(int(os.environ['offset']), int(os.environ['limit']), int(os.environ['numberOfThreads']), token)


if __name__ == '__main__':
    main()
